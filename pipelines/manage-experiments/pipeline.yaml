# PIPELINE DEFINITION
# Name: pipeline
# Inputs:
#    classifier_name: str [Default: 'MultinomialNB']
#    s3_data_path: str [Default: 's3://manage-experiments/data/data_s3.csv']
# Outputs:
#    Output: system.Model
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        classification_metrics:
          artifactType:
            schemaTitle: system.ClassificationMetrics
            schemaVersion: 0.0.1
        metrics:
          artifactType:
            schemaTitle: system.Metrics
            schemaVersion: 0.0.1
        report:
          artifactType:
            schemaTitle: system.Markdown
            schemaVersion: 0.0.1
  comp-importer:
    executorLabel: exec-importer
    inputDefinitions:
      parameters:
        uri:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-preprocess-data:
    executorLabel: exec-preprocess-data
    inputDefinitions:
      artifacts:
        s3_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        test_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
        train_dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        classifier_name:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(\n    model: Input[Model],\n    test_dataset:\
          \ Input[Dataset],\n    metrics: Output[Metrics],\n    classification_metrics:\
          \ Output[ClassificationMetrics],\n    report: Output[Markdown],\n):\n  \
          \  import joblib\n    import pandas as pd\n    from sklearn.metrics import\
          \ confusion_matrix\n    from sklearn.metrics import accuracy_score\n\n \
          \   # Load the model\n    model = joblib.load(model.path)\n\n    # Load\
          \ the test set\n    data = pd.read_csv(test_dataset.path)\n    X_test =\
          \ data.text\n    y_test = data.label\n\n    # Predict the sentiment on the\
          \ test set\n    predictions = model.predict(X_test)\n\n    # Compute accuracy\
          \ comparing the expected results (y_test)\n    # and the predictions\n \
          \   score = accuracy_score(y_test, predictions)\n\n    classes = [\"negative\"\
          , \"positive\"]\n    conf_matrix = confusion_matrix(y_test, predictions).tolist()\n\
          \    # Log metrics\n    metrics.log_metric(\"accuracy\", score)\n    classification_metrics.log_confusion_matrix(classes,\
          \ conf_matrix)\n\n    # Log a markdown report\n    content = \"# Sentiment\
          \ Prediction Report on Test Set\\n\\n\"\n    for text, prediction, expected\
          \ in zip(X_test, predictions, y_test):\n        predicted_class = classes[int(prediction)]\n\
          \        expected_class = classes[int(expected)]\n        content += f\"\
          - Text: {text}, Prediction: {predicted_class}, Expected: {expected_class}\\\
          n\"\n\n    # Write the report\n    with open(report.path, \"w\") as f:\n\
          \        f.write(content)\n\n"
        image: quay.io/modh/runtime-images:runtime-datascience-ubi9-python-3.9-2024a-20241011
    exec-importer:
      importer:
        artifactUri:
          runtimeParameter: uri
        metadata:
          name: raw_data
        typeSchema:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    exec-preprocess-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess_data(\n    s3_dataset: Input[Dataset],\n    train_dataset:\
          \ Output[Dataset],\n    test_dataset: Output[Dataset],\n):\n    import pandas\
          \ as pd\n    from sklearn.model_selection import train_test_split\n\n  \
          \  # Read data from CSV file\n    dataset = pd.read_csv(s3_dataset.path)\n\
          \n    # Convert sentiment text into numeric labels\n    class_ids = {\"\
          positive\": 1, \"negative\": 0}\n    dataset[\"label\"] = dataset.sentiment.map(class_ids)\n\
          \n    # Generate train / test subsets\n    X_train, X_test, y_train, y_test\
          \ = train_test_split(\n        dataset.comment, dataset.label, test_size=0.2,\
          \ random_state=15\n    )\n\n    # Save train / test datasets\n    train_data\
          \ = pd.DataFrame({\"text\": X_train, \"label\": y_train})\n    train_data.to_csv(train_dataset.path,\
          \ index=False)\n\n    test_data = pd.DataFrame({\"text\": X_test, \"label\"\
          : y_test})\n    test_data.to_csv(test_dataset.path, index=False)\n\n"
        image: quay.io/modh/runtime-images:runtime-datascience-ubi9-python-3.9-2024a-20241011
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.10.1'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    dataset: Input[Dataset],\n    model: Output[Model],\n\
          \    classifier_name: str,\n):\n    import joblib\n    import pandas as\
          \ pd\n    from sklearn.pipeline import make_pipeline\n    from sklearn.feature_extraction.text\
          \ import TfidfVectorizer\n    from sklearn.naive_bayes import MultinomialNB\n\
          \    from sklearn.linear_model import LogisticRegression\n    from sklearn.tree\
          \ import DecisionTreeClassifier\n    from sklearn.svm import SVC\n\n   \
          \ data = pd.read_csv(dataset.path)\n    X_train = data.text\n    y_train\
          \ = data.label\n\n    # Available methods to implement a classifier\n  \
          \  methods = {\n        \"MultinomialNB\": lambda: MultinomialNB(),\n  \
          \      \"LogisticRegression\": lambda: LogisticRegression(),\n        \"\
          DecisionTreeClassifier\": lambda: DecisionTreeClassifier(random_state=0),\n\
          \        \"SVC\": lambda: SVC(kernel=\"linear\"),\n    }\n\n    # Select\
          \ the classifier to use\n    if classifier_name not in methods:\n      \
          \  raise RuntimeError(\n            f\"{classifier_name} is not a valid\
          \ classifier. \"\n            \"Choose one of: \" + (\", \".join(methods.keys()))\n\
          \        )\n\n    method = methods[classifier_name]\n\n    # Create the\
          \ model\n    classifier = make_pipeline(TfidfVectorizer(), method())\n\n\
          \    # Train the model\n    classifier.fit(X_train, y_train)\n\n    # Save\
          \ the model\n    joblib.dump(classifier, model.path)\n\n"
        image: quay.io/modh/runtime-images:runtime-datascience-ubi9-python-3.9-2024a-20241011
pipelineInfo:
  name: pipeline
root:
  dag:
    outputs:
      artifacts:
        Output:
          artifactSelectors:
          - outputArtifactKey: model
            producerSubtask: train-model
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        dependentTasks:
        - preprocess-data
        - train-model
        inputs:
          artifacts:
            model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-model
            test_dataset:
              taskOutputArtifact:
                outputArtifactKey: test_dataset
                producerTask: preprocess-data
        taskInfo:
          name: evaluate-model
      importer:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-importer
        inputs:
          parameters:
            uri:
              componentInputParameter: s3_data_path
        taskInfo:
          name: importer
      preprocess-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess-data
        dependentTasks:
        - importer
        inputs:
          artifacts:
            s3_dataset:
              taskOutputArtifact:
                outputArtifactKey: artifact
                producerTask: importer
        taskInfo:
          name: preprocess-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - preprocess-data
        inputs:
          artifacts:
            dataset:
              taskOutputArtifact:
                outputArtifactKey: train_dataset
                producerTask: preprocess-data
          parameters:
            classifier_name:
              componentInputParameter: classifier_name
        taskInfo:
          name: train-model
  inputDefinitions:
    parameters:
      classifier_name:
        defaultValue: MultinomialNB
        isOptional: true
        parameterType: STRING
      s3_data_path:
        defaultValue: s3://manage-experiments/data/data_s3.csv
        isOptional: true
        parameterType: STRING
  outputDefinitions:
    artifacts:
      Output:
        artifactType:
          schemaTitle: system.Model
          schemaVersion: 0.0.1
schemaVersion: 2.1.0
sdkVersion: kfp-2.10.1
